package br.com.hntecnologia.infra.run;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfImportedPage;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.BasicConfigurator;
import org.jrimum.bopepo.BancosSuportados;
import org.jrimum.bopepo.Boleto;
import org.jrimum.bopepo.campolivre.NotSupportedBancoException;
import org.jrimum.bopepo.campolivre.NotSupportedCampoLivreException;
import org.jrimum.bopepo.pdf.Files;
import org.jrimum.bopepo.view.BoletoViewer;
import org.jrimum.domkee.comum.pessoa.endereco.CEP;
import org.jrimum.domkee.comum.pessoa.endereco.Endereco;
import org.jrimum.domkee.comum.pessoa.endereco.UnidadeFederativa;
import org.jrimum.domkee.financeiro.banco.ParametrosBancariosMap;
import org.jrimum.domkee.financeiro.banco.febraban.Agencia;
import org.jrimum.domkee.financeiro.banco.febraban.Carteira;
import org.jrimum.domkee.financeiro.banco.febraban.Cedente;
import org.jrimum.domkee.financeiro.banco.febraban.ContaBancaria;
import org.jrimum.domkee.financeiro.banco.febraban.NumeroDaConta;
import org.jrimum.domkee.financeiro.banco.febraban.Sacado;
import org.jrimum.domkee.financeiro.banco.febraban.SacadorAvalista;
import org.jrimum.domkee.financeiro.banco.febraban.TipoDeCobranca;
import org.jrimum.domkee.financeiro.banco.febraban.TipoDeTitulo;
import org.jrimum.domkee.financeiro.banco.febraban.Titulo;
import org.jrimum.texgit.FlatFile;
import org.jrimum.texgit.Record;
import org.apache.commons.lang.StringUtils;
import org.jrimum.domkee.financeiro.banco.Banco;

import org.jrimum.texgit.Texgit;
import org.jrimum.texgit.TexgitException;
import org.jrimum.utilix.ClassLoaders;

/**
 *
 * @author Batman
 */
public class BoletoVIEW extends javax.swing.JDialog {

    ContaBancaria contaBancaria = new ContaBancaria();

    String nomeBanco = null, nossoNumero = null;
    File layout = null;
    int numeroParcelas = 1;
    List<Titulo> listar = new ArrayList<Titulo>();
    Double valorParcela = 0.0;
    Date data = null;

    /**
     * Creates new form BoletoVIEW
     */
    public BoletoVIEW(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("BOLETO");
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        tipoBoleto = new javax.swing.ButtonGroup();
        tipoBanco = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCedente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCNPJ = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtNumeroConta = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtDigitoAgencia = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtCarteira = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtAgencia = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtDataVencimento = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        txtValorDocumento = new javax.swing.JTextField();
        txtParcela = new javax.swing.JSpinner();
        rbCarne = new javax.swing.JRadioButton();
        rbSimples = new javax.swing.JRadioButton();
        btnGerar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtDigitoConta = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        rbCaixa = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        rbBancoBrasil = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        rbBradesco = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        rbSantander = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        rbItau = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        rbHSBC = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        rbSicoob = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtSacado = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCPF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtInstrucao1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtInstrucao2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtInstrucao3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtInstrucao4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtInstrucao5 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtInstrucao6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtInstrucao7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtInstrucao8 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Beneficiário:"));
        jPanel1.setLayout(null);

        jLabel1.setText("Beneficiário:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 20, 200, 14);

        txtCedente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCedenteKeyPressed(evt);
            }
        });
        jPanel1.add(txtCedente);
        txtCedente.setBounds(10, 40, 260, 20);

        jLabel2.setText("CPF/CNPJ:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(280, 20, 60, 14);

        txtCNPJ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCNPJKeyPressed(evt);
            }
        });
        jPanel1.add(txtCNPJ);
        txtCNPJ.setBounds(280, 40, 170, 20);

        jLabel21.setText("Nº da Conta:");
        jPanel1.add(jLabel21);
        jLabel21.setBounds(10, 70, 70, 14);

        txtNumeroConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNumeroContaKeyPressed(evt);
            }
        });
        jPanel1.add(txtNumeroConta);
        txtNumeroConta.setBounds(10, 90, 190, 20);

        jLabel22.setText("Digito:");
        jPanel1.add(jLabel22);
        jLabel22.setBounds(210, 70, 50, 14);

        txtDigitoAgencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDigitoAgenciaKeyPressed(evt);
            }
        });
        jPanel1.add(txtDigitoAgencia);
        txtDigitoAgencia.setBounds(420, 90, 60, 20);

        jLabel23.setText("Carteira:");
        jPanel1.add(jLabel23);
        jLabel23.setBounds(280, 70, 50, 14);
        jPanel1.add(txtCarteira);
        txtCarteira.setBounds(280, 90, 60, 20);

        jLabel24.setText("Agência:");
        jPanel1.add(jLabel24);
        jLabel24.setBounds(350, 70, 70, 14);
        jPanel1.add(txtAgencia);
        txtAgencia.setBounds(350, 90, 60, 20);

        jLabel25.setText("Vencimento:");
        jPanel1.add(jLabel25);
        jLabel25.setBounds(10, 120, 90, 14);

        try {
            txtDataVencimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataVencimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataVencimentoKeyPressed(evt);
            }
        });
        jPanel1.add(txtDataVencimento);
        txtDataVencimento.setBounds(10, 140, 80, 20);

        jLabel26.setText("Valor Documento:");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(100, 120, 110, 14);

        txtValorDocumento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtValorDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorDocumentoKeyPressed(evt);
            }
        });
        jPanel1.add(txtValorDocumento);
        txtValorDocumento.setBounds(100, 140, 100, 20);
        jPanel1.add(txtParcela);
        txtParcela.setBounds(290, 140, 50, 20);

        tipoBoleto.add(rbCarne);
        rbCarne.setText("Carnê");
        rbCarne.setOpaque(false);
        jPanel1.add(rbCarne);
        rbCarne.setBounds(212, 120, 70, 23);

        tipoBoleto.add(rbSimples);
        rbSimples.setText("Simples");
        rbSimples.setOpaque(false);
        jPanel1.add(rbSimples);
        rbSimples.setBounds(212, 140, 80, 23);

        btnGerar.setText("Gerar Boleto");
        btnGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGerar);
        btnGerar.setBounds(350, 140, 110, 23);

        jLabel6.setText("Parcelas:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(290, 120, 60, 20);

        jLabel27.setText("Digito:");
        jPanel1.add(jLabel27);
        jLabel27.setBounds(420, 70, 60, 14);

        txtDigitoConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDigitoContaKeyPressed(evt);
            }
        });
        jPanel1.add(txtDigitoConta);
        txtDigitoConta.setBounds(210, 90, 60, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(470, 90, 490, 180);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Bancos:"));
        jPanel3.setLayout(null);

        tipoBanco.add(rbCaixa);
        rbCaixa.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rbCaixa.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rbCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCaixaActionPerformed(evt);
            }
        });
        jPanel3.add(rbCaixa);
        rbCaixa.setBounds(10, 20, 20, 21);

        jLabel14.setIcon(new javax.swing.ImageIcon("/home/henrique/logo-caixa.png")); // NOI18N
        jPanel3.add(jLabel14);
        jLabel14.setBounds(30, 20, 60, 20);

        tipoBanco.add(rbBancoBrasil);
        rbBancoBrasil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBancoBrasilActionPerformed(evt);
            }
        });
        jPanel3.add(rbBancoBrasil);
        rbBancoBrasil.setBounds(86, 20, 20, 21);

        jLabel15.setIcon(new javax.swing.ImageIcon( "/home/henrique/banco-do-brasil-logo.jpg")); // NOI18N
        jPanel3.add(jLabel15);
        jLabel15.setBounds(110, 10, 50, 40);

        tipoBanco.add(rbBradesco);
        rbBradesco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBradescoActionPerformed(evt);
            }
        });
        jPanel3.add(rbBradesco);
        rbBradesco.setBounds(165, 20, 20, 21);

        jLabel16.setIcon(new javax.swing.ImageIcon("/home/henrique/bradesco-logo.jpg")); // NOI18N
        jPanel3.add(jLabel16);
        jLabel16.setBounds(190, 10, 50, 40);

        tipoBanco.add(rbSantander);
        rbSantander.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSantanderActionPerformed(evt);
            }
        });
        jPanel3.add(rbSantander);
        rbSantander.setBounds(250, 20, 21, 21);

        jLabel17.setIcon(new javax.swing.ImageIcon("/home/henrique/Santander-logo.png")); // NOI18N
        jPanel3.add(jLabel17);
        jLabel17.setBounds(280, 16, 50, 30);

        tipoBanco.add(rbItau);
        rbItau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbItauActionPerformed(evt);
            }
        });
        jPanel3.add(rbItau);
        rbItau.setBounds(330, 20, 20, 21);

        jLabel18.setIcon(new javax.swing.ImageIcon("/home/henrique/logo-itau.jpg")); // NOI18N
        jPanel3.add(jLabel18);
        jLabel18.setBounds(356, 10, 50, 50);

        tipoBanco.add(rbHSBC);
        rbHSBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHSBCActionPerformed(evt);
            }
        });
        jPanel3.add(rbHSBC);
        rbHSBC.setBounds(410, 20, 20, 21);

        jLabel19.setIcon(new javax.swing.ImageIcon("/home/henrique/logo-hsbc.png")); // NOI18N
        jPanel3.add(jLabel19);
        jLabel19.setBounds(440, 10, 50, 50);

        tipoBanco.add(rbSicoob);
        rbSicoob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSicoobActionPerformed(evt);
            }
        });
        jPanel3.add(rbSicoob);
        rbSicoob.setBounds(496, 20, 20, 21);

        jLabel20.setIcon(new javax.swing.ImageIcon("/home/henrique/logo-sicoob.jpg")); // NOI18N
        jPanel3.add(jLabel20);
        jLabel20.setBounds(520, 14, 50, 40);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(10, 10, 580, 70);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Pagador:"));
        jPanel2.setLayout(null);

        jLabel3.setText("Pagador:");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 20, 80, 14);

        txtSacado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSacadoKeyPressed(evt);
            }
        });
        jPanel2.add(txtSacado);
        txtSacado.setBounds(10, 40, 260, 20);

        jLabel4.setText("CPF/CNPJ:");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(280, 20, 60, 14);

        txtCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCPFKeyPressed(evt);
            }
        });
        jPanel2.add(txtCPF);
        txtCPF.setBounds(280, 40, 170, 20);

        jLabel5.setText("Instrução 1:");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(10, 74, 70, 14);

        txtInstrucao1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao1KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao1);
        txtInstrucao1.setBounds(80, 70, 370, 20);

        jLabel7.setText("Instrução 2:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(10, 100, 70, 14);

        txtInstrucao2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao2KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao2);
        txtInstrucao2.setBounds(80, 100, 370, 20);

        jLabel8.setText("Instrução 3:");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(10, 130, 70, 14);

        txtInstrucao3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao3KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao3);
        txtInstrucao3.setBounds(80, 130, 370, 20);

        jLabel9.setText("Instrução 4:");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(10, 160, 70, 14);

        txtInstrucao4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao4KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao4);
        txtInstrucao4.setBounds(80, 160, 370, 20);

        jLabel10.setText("Instrução 5:");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(10, 190, 70, 14);

        txtInstrucao5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao5KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao5);
        txtInstrucao5.setBounds(80, 190, 370, 20);

        jLabel11.setText("Instrução 6:");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(10, 220, 70, 14);

        txtInstrucao6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao6KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao6);
        txtInstrucao6.setBounds(80, 220, 370, 20);

        jLabel12.setText("Instrução 7:");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(10, 250, 70, 14);

        txtInstrucao7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao7KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao7);
        txtInstrucao7.setBounds(80, 250, 370, 20);

        jLabel13.setText("Instrução 8:");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(10, 280, 70, 14);

        txtInstrucao8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInstrucao8KeyPressed(evt);
            }
        });
        jPanel2.add(txtInstrucao8);
        txtInstrucao8.setBounds(80, 280, 370, 20);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 90, 460, 310);

        setBounds(0, 0, 972, 446);
    }// </editor-fold>                        

    private void btnGerarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            if (rbCaixa.isSelected() == false && rbBancoBrasil.isSelected() == false
                    && rbBradesco.isSelected() == false && rbSantander.isSelected() == false
                    && rbItau.isSelected() == false && rbHSBC.isSelected() == false
                    && rbSicoob.isSelected() == false) {
                JOptionPane.showMessageDialog(null, "Selecionar o banco!", "MENSAGEM", JOptionPane.WARNING_MESSAGE);
            } else if (rbSimples.isSelected() == true) {
                GerarBoleto();
            } else if (rbCarne.isSelected() == true) {
                // Inserir();
                GerarBoletoCarne();
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gerar o boleto!", "MENSAGEM", JOptionPane.WARNING_MESSAGE);
            System.out.println("" + e.getMessage());
        }


    }                                        

    private void txtCedenteKeyPressed(java.awt.event.KeyEvent evt) {                                      
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtCNPJ.requestFocusInWindow();
        }
    }                                     

    private void txtCNPJKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtNumeroConta.requestFocusInWindow();
        }
    }                                  

    private void txtSacadoKeyPressed(java.awt.event.KeyEvent evt) {                                     
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtCPF.requestFocusInWindow();
        }
    }                                    

    private void txtCPFKeyPressed(java.awt.event.KeyEvent evt) {                                  
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao1.requestFocusInWindow();
        }
    }                                 

    private void rbCaixaActionPerformed(java.awt.event.ActionEvent evt) {                                        
        txtCarteira.setText("12");
        txtAgencia.setText("936");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                       

    private void rbBancoBrasilActionPerformed(java.awt.event.ActionEvent evt) {                                              
        txtCarteira.setText("12");
        txtAgencia.setText("001");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                             

    private void rbBradescoActionPerformed(java.awt.event.ActionEvent evt) {                                           
        txtCarteira.setText("12");
        txtAgencia.setText("237");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                          

    private void rbSantanderActionPerformed(java.awt.event.ActionEvent evt) {                                            
        txtCarteira.setText("101");
        txtAgencia.setText("033");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                           

    private void rbItauActionPerformed(java.awt.event.ActionEvent evt) {                                       
        //Numero da conta apenas 5 digitos
        txtCarteira.setText("112");
        txtAgencia.setText("341");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                      

    private void rbHSBCActionPerformed(java.awt.event.ActionEvent evt) {                                       
        txtCarteira.setText("12");
        txtAgencia.setText("399");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                      

    private void rbSicoobActionPerformed(java.awt.event.ActionEvent evt) {                                         
        txtCarteira.setText("01");
        txtAgencia.setText("3074");
        txtDigitoAgencia.setText("1");
        txtSacado.requestFocusInWindow();
    }                                        

    private void txtNumeroContaKeyPressed(java.awt.event.KeyEvent evt) {                                          
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtDigitoConta.requestFocusInWindow();
        }
    }                                         

    private void txtDigitoAgenciaKeyPressed(java.awt.event.KeyEvent evt) {                                            
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtDataVencimento.requestFocusInWindow();
        }
    }                                           

    private void txtInstrucao1KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao2.requestFocusInWindow();
        }
    }                                        

    private void txtInstrucao2KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao3.requestFocusInWindow();
        }
    }                                        

    private void txtInstrucao3KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao4.requestFocusInWindow();
        }
    }                                        

    private void txtInstrucao4KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao5.requestFocusInWindow();
        }
    }                                        

    private void txtInstrucao8KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtCedente.requestFocusInWindow();
        }
    }                                        

    private void txtDataVencimentoKeyPressed(java.awt.event.KeyEvent evt) {                                             
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtValorDocumento.requestFocusInWindow();
        }
    }                                            

    private void txtValorDocumentoKeyPressed(java.awt.event.KeyEvent evt) {                                             
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtParcela.requestFocusInWindow();
        }
    }                                            

    private void txtDigitoContaKeyPressed(java.awt.event.KeyEvent evt) {                                          
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtDataVencimento.requestFocusInWindow();
        }
    }                                         

    private void txtInstrucao5KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao6.requestFocusInWindow();
        }
    }                                        

    private void txtInstrucao6KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao7.requestFocusInWindow();
        }
    }                                        

    private void txtInstrucao7KeyPressed(java.awt.event.KeyEvent evt) {                                         
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtInstrucao8.requestFocusInWindow();
        }
    }                                        

    private void GerarBoleto() {
        try {
            BasicConfigurator.configure();

            if (rbCaixa.isSelected() == true) {

                crieBoletoCaixa();

            } else if (rbBancoBrasil.isSelected() == true) {

                crieBoletoBBNossoNumero10();
            } else if (rbBradesco.isSelected() == true) {

                crieBoletoBradesco();
            } else if (rbSantander.isSelected() == true) {

                crieBoletoSantander();
            } else if (rbItau.isSelected() == true) {

                crieBoletoItau();

            } else if (rbSicoob.isSelected() == true) {

                try {
                    crieBoletoSicoob();
                } catch (IOException ex) {
                    System.out.println("" + ex.getMessage());
                }
            } else if (rbHSBC.isSelected() == true) {
                crieBoletoHSBC();
            }
        } catch (Exception e) {
            System.out.println("Erro ao Gerar o boleto! " + e.getMessage());
        }
    }

    private void GerarBoletoCarne() {
        try {
            BasicConfigurator.configure();

            Boleto boleto = null;
            int i = 0;
            List<Boleto> boletos = new ArrayList<Boleto>();
            ArrayList<Date> datas = new ArrayList<Date>();
            GregorianCalendar cal = new GregorianCalendar();
            if (rbCaixa.isSelected() == true) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {
                    boleto = crieBoletoCaixa();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    lista.add(String.valueOf(i));
                    boletos.add(boleto);
                    i++;
                }

            } else if (rbBancoBrasil.isSelected()) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {
                    boleto = crieBoletoBBNossoNumero10();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    lista.add(String.valueOf(i));

                    boletos.add(boleto);
                    i++;
                }

            } else if (rbBradesco.isSelected() == true) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {
                    boleto = crieBoletoBradesco();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    lista.add(String.valueOf(i));
                    boletos.add(boleto);
                    i++;
                }
            } else if (rbSantander.isSelected() == true) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {

                    boleto = crieBoletoSantander();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    lista.add(String.valueOf(i));
                    boletos.add(boleto);
                    i++;
                }
            } else if (rbItau.isSelected() == true) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {
                    boleto = crieBoletoItau();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    lista.add(String.valueOf(i));
                    boletos.add(boleto);
                    i++;
                }
            } else if (rbHSBC.isSelected() == true) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {

                    boleto = crieBoletoHSBC();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    boletos.add(boleto);
                    lista.add(String.valueOf(i));
                    i++;
                }
            } else if (rbSicoob.isSelected() == true) {

                while (i < Integer.valueOf(String.valueOf(txtParcela.getValue()))) {
                    boleto = crieBoletoSicoob();
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, i);
                    datas.add(cal.getTime());
                    boleto.addTextosExtras("txtFcDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtRsDataVencimento", new SimpleDateFormat("dd/MM/yyyy").format(datas.get(i)));
                    boleto.addTextosExtras("txtFcNumeroParcela", String.valueOf(i + 1));
                    boleto.addTextosExtras("txtRsNumeroParcela", String.valueOf(i + 1));
                    lista.add(String.valueOf(i));
                    boletos.add(boleto);
                    i++;
                }
            }

            //Informando o TemplatePersonalizado
            File templatePersonalizado = new File("/BoletoBancario/BoletoCarne3PorPagina.pdf");

            File boletosPorPagina = groupInPages(boletos, "Carne.pdf", templatePersonalizado);

            mostreBoletoNaTela(boletosPorPagina);

        } catch (Exception e) {
            System.out.println("Aqui " + e.getMessage());
        }

    }

    private static void mostreBoletoNaTela(File arquivoBoleto) {
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        try {
            desktop.open(arquivoBoleto);
        } catch (Exception e) {
            System.out.println("Erro ao Mostrar o Boleto! " + e.getMessage());
        }
    }

    private static File groupInPages(List<Boleto> boletos, String filePath, File templatePersonalizado) {

        File arq = null;
        

        BoletoViewer boletoViewer = new BoletoViewer(boletos.get(0));
        boletoViewer.setTemplate(templatePersonalizado);

        List<byte[]> boletosEmbytes = new ArrayList<byte[]>(boletos.size());

        //Adicionando os PDFs, em forma de Array de bytes, na lista.
        for (Boleto bop : boletos) {

            boletosEmbytes.add(boletoViewer.setBoleto(bop).getPdfAsByteArray());
         
        }
        
        try {
            //Criando arquivo com os boletos da lista.
            arq = Files.bytesToFile(filePath, mergeFilesInPages(boletosEmbytes));

        } catch (Exception e) {
            throw new IllegalArgumentException("Erro na geração do PDF, causado por: " + e.getLocalizedMessage(), e);
        }
        return arq;
    }

    private Cedente crieCedente() {
        Cedente cedente = new Cedente(txtCedente.getText(), txtCNPJ.getText());
        return cedente;
    }

    private Sacado crieSacado() {
        Sacado sacado = new Sacado(txtSacado.getText(), txtCPF.getText());
        Endereco enderecoSac = new Endereco();
        enderecoSac.setUF(UnidadeFederativa.MG);
        enderecoSac.setLocalidade("Iturama");
        enderecoSac.setCep(new CEP("38280-000"));
        enderecoSac.setBairro("Centro");
        enderecoSac.setLogradouro("Av. Rio Grande");
        enderecoSac.setNumero("333");
        sacado.addEndereco(enderecoSac);
        return sacado;
    }

    private SacadorAvalista crieSacadorAvalista() {
        SacadorAvalista sacadorAvalista = new SacadorAvalista(txtCedente.getText(), txtCNPJ.getText());
        Endereco enderecoSacAval = new Endereco();
        enderecoSacAval.setUF(UnidadeFederativa.MG);
        enderecoSacAval.setLocalidade("Iturama");
        enderecoSacAval.setCep(new CEP("38280-000"));
        enderecoSacAval.setBairro("Centro");
        enderecoSacAval.setLogradouro("Rua Frutal");
        enderecoSacAval.setNumero("562");
        sacadorAvalista.addEndereco(enderecoSacAval);
        return sacadorAvalista;

    }

    private Boleto crieBoletoBBNossoNumero10() throws ParseException {

        //contaBancaria = titulo.getContaBancaria();
        contaBancaria.setBanco(BancosSuportados.BANCO_DO_BRASIL.create());
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), "1"));
        contaBancaria.setCarteira(new Carteira(Integer.parseInt(txtCarteira.getText())));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());
        titulo.setNossoNumero("1234567890");
        titulo.setNumeroDoDocumento("123456");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.A);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);
        Boleto boletoBBNossoNumero10 = new Boleto(titulo);

        boletoBBNossoNumero10.setLocalPagamento("Pagavel preferencialmente na rede Banco do Brasil ou em "
                + "qualquer banco até o vencimento.");
        boletoBBNossoNumero10.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoBBNossoNumero10.setInstrucao1(txtInstrucao1.getText());
        boletoBBNossoNumero10.setInstrucao2(txtInstrucao2.getText());
        boletoBBNossoNumero10.setInstrucao3(txtInstrucao3.getText());
        boletoBBNossoNumero10.setInstrucao4(txtInstrucao4.getText());
        boletoBBNossoNumero10.setInstrucao5(txtInstrucao5.getText());
        boletoBBNossoNumero10.setInstrucao6(txtInstrucao6.getText());
        boletoBBNossoNumero10.setInstrucao7(txtInstrucao7.getText());
        boletoBBNossoNumero10.setInstrucao8(txtInstrucao8.getText());
        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }

        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {
            BoletoViewer boletoViewer = new BoletoViewer(boletoBBNossoNumero10);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");
            mostreBoletoNaTela(arquivo);

        } else if (rbCarne.isSelected() == true) {

        }

        return boletoBBNossoNumero10;

    }

    private void geraRemessa(List<Titulo> listaTitulos) throws IOException {
        try {
            // arquivoRemessa = new File("/BoletoBancario/LayoutBBCNAB240Retorno.txg.xml");
            File arquivoRemessa = null;
            if (rbCaixa.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutCaixaCNAB240Envio.txg.xml");
            } else if (rbBancoBrasil.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutBBCNAB240Envio.txg.xml");
            } else if (rbBradesco.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutBradescoCNAB240Envio.txg.xml");
            } else if (rbSantander.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutSantanderCNAB240Envio.txg.xml");
            } else if (rbItau.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutItauCNAB240Envio.txg.xml");
            } else if (rbHSBC.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutHSBCCNAB240Envio.txg.xml");
            } else if (rbSicoob.isSelected() == true) {
                arquivoRemessa = new File("/BoletoBancario/src/leiautes/LayoutSicoobCNAB240Envio.txg.xml");
            }

            FlatFile<Record> ff = Texgit.createFlatFile(arquivoRemessa);

            int i = 0;
            ff.addRecord(createHeader(ff, i));
            ff.addRecord(createHeaderLote(ff, i));
            i++;

            try {

                for (Titulo titulo : listaTitulos) {
                    ff.addRecord(createDetailSegmentoP(ff, titulo, i));
                }

                i++;
                ff.addRecord(createTrailerLote(ff, i));
                i++;
                i++; //Soma mais um porque tem que contar o cabeçalho do Arquivo.
                ff.addRecord(createTrailer(ff, i));

                FileUtils.writeLines(new File("/BoletoBancario/Remessa.rem"), ff.write(), "\r\n");
            } catch (IOException e) {
                System.out.println("" + e.getMessage());
            }
        } catch (Exception e) {
            System.out.println("Erro " + e.getMessage());
        }

    }

    private Record createHeader(FlatFile<Record> flat, int seq) {
        Record headerArquivo = flat.createRecord("HeaderArquivo");
        headerArquivo.setValue("CpfCnpj", txtCNPJ.getText());
        headerArquivo.setValue("UsoExclusivo", StringUtils.repeat(" ", 9));
        headerArquivo.setValue("NumCpfCnpj", txtCNPJ.getText());
        headerArquivo.setValue("NumAgencia", txtAgencia.getText());
        headerArquivo.setValue("NumDigitoAgencia", 1);
        headerArquivo.setValue("NumContaCorrente", StringUtils.substring(txtNumeroConta.getText(), 0, 5));
        headerArquivo.setValue("DigContaCorrente", txtDigitoAgencia.getText());
        headerArquivo.setValue("DigAgenciaConta", StringUtils.repeat(" ", 1));
        headerArquivo.setValue("NomeEmpresa", StringUtils.substring(txtCedente.getText(), 0, 30));
        headerArquivo.setValue("Brancos3", StringUtils.repeat(" ", 10));
        headerArquivo.setValue("DataGeracao", new SimpleDateFormat("ddMMyyyy").format(new Date()));
        headerArquivo.setValue("HoraGeracao", new SimpleDateFormat("HHmmss").format(new Date()));
        headerArquivo.setValue("NumRemessa", seq);
        headerArquivo.setValue("DensidadeArquivo", StringUtils.repeat("0", 5));
        headerArquivo.setValue("Brancos4", StringUtils.repeat(" ", 20));
        headerArquivo.setValue("Brancos5", StringUtils.repeat(" ", 20));
        headerArquivo.setValue("Brancos6", StringUtils.repeat(" ", 29));

        return headerArquivo;

    }

    private Record createHeaderLote(FlatFile<Record> flat, int seq) {
        Record headerLote = flat.createRecord("HeaderLote");

        headerLote.setValue("UsoExclusivo", StringUtils.repeat(" ", 2));
        headerLote.setValue("UsoExclusivo1", " ");
        headerLote.setValue("CpfCnpj", txtCPF.getText());
        headerLote.setValue("NumCpfCnpj", txtCNPJ.getText());
        headerLote.setValue("NumAgencia", txtAgencia.getText());
        headerLote.setValue("DigAgencia", 1);
        headerLote.setValue("NumContaCorrente", StringUtils.substring(txtNumeroConta.getText(), 0, 5));
        headerLote.setValue("DigContaCorrente", txtDigitoAgencia.getText());
        headerLote.setValue("DigAgenciaConta", StringUtils.repeat(" ", 1));
        headerLote.setValue("NomeEmpresa", StringUtils.substring(txtSacado.getText(), 0, 30));
        headerLote.setValue("Mensagem1", StringUtils.repeat(" ", 40));
        headerLote.setValue("Mensagem2", StringUtils.repeat(" ", 40));
        headerLote.setValue("NumRemessa", seq);
        headerLote.setValue("DataGeracao", new SimpleDateFormat("ddMMyyyy").format(new Date()));

        headerLote.setValue("UsoExclusivo2", StringUtils.repeat(" ", 33));
        return headerLote;

    }

    private Record createTrailerLote(FlatFile<Record> flat, int seq) {
        Record trailerLote = flat.createRecord("TraillerLote");
        trailerLote.setValue("QtdRegistros", seq);
        trailerLote.setValue("UsoExclusivo1", StringUtils.repeat(" ", 9));
        trailerLote.setValue("UsoExclusivo2", StringUtils.repeat(" ", 217));
        return trailerLote;
    }

    private Record createTrailer(FlatFile<Record> flat, int seq) {
        Record trailerArquivo = flat.createRecord("TraillerArquivo");
        trailerArquivo.setValue("UsoExclusivo1", StringUtils.repeat(" ", 9));
        trailerArquivo.setValue("QtdLotes", "1");
        trailerArquivo.setValue("QtdArquivos", seq);
        trailerArquivo.setValue("QtdContas", seq);
        trailerArquivo.setValue("UsoExclusivo2", StringUtils.repeat(" ", 205));

        return trailerArquivo;

    }

    private Record createDetailSegmentoP(FlatFile<Record> flat, Titulo titulo, int seq) {
        Record segmentoP = flat.createRecord("SegmentoP");

        segmentoP.setValue("NumSeqRegistro", seq);
        segmentoP.setValue("NumAgencia", txtAgencia.getText());
        segmentoP.setValue("DigAgencia", 1);
        segmentoP.setValue("NumContaCorrente", StringUtils.substring(txtNumeroConta.getText(), 0, 5));
        segmentoP.setValue("DigContaCorrente", txtDigitoAgencia.getText());
        segmentoP.setValue("DigAgenciaConta", StringUtils.repeat(" ", 1));
        segmentoP.setValue("NossoNumero", "1234567890");
        segmentoP.setValue("CodCarteira", "12");
        segmentoP.setValue("NumeroDoDocumento", "123456");
        segmentoP.setValue("Vencimento", new SimpleDateFormat("ddMMyyyy").format(new Date()));
        segmentoP.setValue("Valor", String.valueOf(titulo.getValor()));
        segmentoP.setValue("Aceite", "N");
        segmentoP.setValue("Emissao", new SimpleDateFormat("ddMMyyyy").format(new Date()));
        segmentoP.setValue("CodMora", 1);
        //BigDecimal valorMora = titulo.getMora().divide(new BigDecimal(30),2,RoundingMode.HALF_DOWN).multiply(new BigDecimal(titulo.getValor())).divide(new BigDecimal("100")).setScale(2, RoundingMode.HALF_DOWN);
        segmentoP.setValue("JurosDeMora", BigDecimal.valueOf(0.05));
        segmentoP.setValue("CodigoProtesto", 5);
        segmentoP.setValue("DiasProteste", 5);
        seq++;
        segmentoP.addInnerRecord(createDetailSegmentoQ(flat, seq));
        seq++;
        segmentoP.addInnerRecord(createDetailSegmentoR(flat, seq));
        return segmentoP;

    }

    private Record createDetailSegmentoR(FlatFile<Record> flat, int seq) {
        Record segmentoR = flat.createRecord("SegmentoR");

        segmentoR.setValue("NumSeqRegistro", seq);
        int codMulta;
        String dataMulta;
        BigDecimal valorMulta;
        segmentoR.setValue("CodMulta", 2);
        segmentoR.setValue("ValorMulta", 5);
        segmentoR.setValue("DataMulta", new SimpleDateFormat("ddMMyyyy").format(new Date()));
        return segmentoR;
    }

    private Record createDetailSegmentoQ(FlatFile<Record> flat, int seq) {
        Record segmentoQ = flat.createRecord("SegmentoQ");

        segmentoQ.setValue("NumRegistro", seq);
        segmentoQ.setValue("TipoInscricaoSacado", txtCPF.getText());
        segmentoQ.setValue("NumeroInscricaoSacado", txtCPF.getText());
        segmentoQ.setValue("NomeSacado", txtSacado.getText());
        segmentoQ.setValue("LogradouroSacado", "Avenida Rio Grande, n 123");
        segmentoQ.setValue("BairroSacado", "Centro");
        segmentoQ.setValue("CepSacado", "38280000");
        segmentoQ.setValue("SufixoCep", "38280000");
        segmentoQ.setValue("Cidade", "Iturama");
        segmentoQ.setValue("Estado", "MG");

        return segmentoQ;

    }

    private Boleto crieBoletoBradesco() throws ParseException {

        //contaBancaria = titulo.getContaBancaria();
        contaBancaria.setBanco(BancosSuportados.BANCO_BRADESCO.create());
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoConta.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setCarteira(new Carteira(Integer.parseInt(txtCarteira.getText())));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());
        titulo.setNossoNumero("12345678901");
        titulo.setNumeroDoDocumento("123456");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.A);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);

        Boleto boletoBradesco = new Boleto(titulo);

        boletoBradesco.setLocalPagamento("Pagavel preferencialmente na rede Bradesco ou em "
                + "qualquer banco até o vencimento.");
        boletoBradesco.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoBradesco.setInstrucao1(txtInstrucao1.getText());
        boletoBradesco.setInstrucao2(txtInstrucao2.getText());
        boletoBradesco.setInstrucao3(txtInstrucao3.getText());
        boletoBradesco.setInstrucao4(txtInstrucao4.getText());
        boletoBradesco.setInstrucao5(txtInstrucao5.getText());
        boletoBradesco.setInstrucao6(txtInstrucao6.getText());
        boletoBradesco.setInstrucao7(txtInstrucao7.getText());
        boletoBradesco.setInstrucao8(txtInstrucao8.getText());

        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }
        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {

            BoletoViewer boletoViewer = new BoletoViewer(boletoBradesco);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");
            mostreBoletoNaTela(arquivo);
        } else if (rbCarne.isSelected() == true) {

        }

        return boletoBradesco;

    }

    private Boleto crieBoletoSantander() throws ParseException {

        //contaBancaria = titulo.getContaBancaria();
        contaBancaria.setBanco(BancosSuportados.BANCO_SANTANDER.create());
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoConta.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setCarteira(new Carteira(Integer.parseInt(txtCarteira.getText())));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());

        titulo.setNumeroDoDocumento("123456");
        titulo.setNossoNumero("1234567890");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.N);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);

        Boleto boletoSantander = new Boleto(titulo);

        boletoSantander.setLocalPagamento("Pagavel preferencialmente na rede Santander ou em "
                + "qualquer banco até o vencimento.");
        boletoSantander.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoSantander.setInstrucao1(txtInstrucao1.getText());
        boletoSantander.setInstrucao2(txtInstrucao2.getText());
        boletoSantander.setInstrucao3(txtInstrucao3.getText());
        boletoSantander.setInstrucao4(txtInstrucao4.getText());
        boletoSantander.setInstrucao5(txtInstrucao5.getText());
        boletoSantander.setInstrucao6(txtInstrucao6.getText());
        boletoSantander.setInstrucao7(txtInstrucao7.getText());
        boletoSantander.setInstrucao8(txtInstrucao8.getText());

        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }
        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {
            BoletoViewer boletoViewer = new BoletoViewer(boletoSantander);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");
            mostreBoletoNaTela(arquivo);
        } else if (rbCarne.isSelected() == true) {

        }

        return boletoSantander;

    }

    private Boleto crieBoletoCaixa() throws ParseException {

        contaBancaria.setBanco(BancosSuportados.CAIXA_ECONOMICA_FEDERAL.create());
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoConta.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setCarteira(new Carteira(Integer.parseInt(txtCarteira.getText())));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());
        titulo.setParametrosBancarios(new ParametrosBancariosMap("CodigoOperacao", 870));
        titulo.setNossoNumero("9934567890");
        titulo.setNumeroDoDocumento("123456");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.A);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);

        Boleto boletoCaixa = new Boleto(titulo);

        boletoCaixa.setLocalPagamento("Pagavel preferencialmente na rede Caixa ou em "
                + "qualquer banco até o vencimento.");
        boletoCaixa.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoCaixa.setInstrucao1(txtInstrucao1.getText());
        boletoCaixa.setInstrucao2(txtInstrucao2.getText());
        boletoCaixa.setInstrucao3(txtInstrucao3.getText());
        boletoCaixa.setInstrucao4(txtInstrucao4.getText());
        boletoCaixa.setInstrucao5(txtInstrucao5.getText());
        boletoCaixa.setInstrucao6(txtInstrucao6.getText());
        boletoCaixa.setInstrucao7(txtInstrucao7.getText());
        boletoCaixa.setInstrucao8(txtInstrucao8.getText());

        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }
        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {
            BoletoViewer boletoViewer = new BoletoViewer(boletoCaixa);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");

            mostreBoletoNaTela(arquivo);

        } else if (rbCarne.isSelected() == true) {

        }
        return boletoCaixa;

    }

    private Boleto crieBoletoItau() throws ParseException {

        contaBancaria.setBanco(BancosSuportados.BANCO_ITAU.create());
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoConta.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setCarteira(new Carteira(Integer.parseInt(txtCarteira.getText())));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());
        titulo.setNossoNumero("99345678");
        titulo.setNumeroDoDocumento("123456");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.A);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);
        Boleto boletoItau = new Boleto(titulo);

        boletoItau.setLocalPagamento("Pagavel preferencialmente na rede Itaú ou em "
                + "qualquer banco até o vencimento.");
        boletoItau.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoItau.setInstrucao1(txtInstrucao1.getText());
        boletoItau.setInstrucao2(txtInstrucao2.getText());
        boletoItau.setInstrucao3(txtInstrucao3.getText());
        boletoItau.setInstrucao4(txtInstrucao4.getText());
        boletoItau.setInstrucao5(txtInstrucao5.getText());
        boletoItau.setInstrucao6(txtInstrucao6.getText());
        boletoItau.setInstrucao7(txtInstrucao7.getText());
        boletoItau.setInstrucao8(txtInstrucao8.getText());

        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }
        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {
            BoletoViewer boletoViewer = new BoletoViewer(boletoItau);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");
            mostreBoletoNaTela(arquivo);
        } else if (rbCarne.isSelected() == true) {

        }

        return boletoItau;

    }

    private Boleto crieBoletoHSBC() throws ParseException {

        contaBancaria.setBanco(BancosSuportados.HSBC.create());
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoConta.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setCarteira(new Carteira(0, TipoDeCobranca.COM_REGISTRO));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());
        titulo.setNossoNumero("9934567892");
        titulo.setNumeroDoDocumento("123456");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.A);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);
        Boleto boletoHSBC = new Boleto(titulo);

        boletoHSBC.setLocalPagamento("Pagavel preferencialmente na rede HSBC ou em "
                + "qualquer banco até o vencimento.");
        boletoHSBC.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoHSBC.setInstrucao1(txtInstrucao1.getText());
        boletoHSBC.setInstrucao2(txtInstrucao2.getText());
        boletoHSBC.setInstrucao3(txtInstrucao3.getText());
        boletoHSBC.setInstrucao4(txtInstrucao4.getText());
        boletoHSBC.setInstrucao5(txtInstrucao5.getText());
        boletoHSBC.setInstrucao6(txtInstrucao6.getText());
        boletoHSBC.setInstrucao7(txtInstrucao7.getText());
        boletoHSBC.setInstrucao8(txtInstrucao8.getText());

        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }
        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {
            BoletoViewer boletoViewer = new BoletoViewer(boletoHSBC);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");
            mostreBoletoNaTela(arquivo);
        } else if (rbCarne.isSelected() == true) {

        }

        return boletoHSBC;

    }

    private Boleto crieBoletoSicoob() throws IOException, ParseException {
        Banco banco = BancosSuportados.BANCOOB.create();

        banco.setImgLogo(ImageIO.read(new File("/BoletoBancario/src/Imagem/sicoob.png")));
        contaBancaria.setBanco(banco);
        contaBancaria.setNumeroDaConta(new NumeroDaConta(
                Integer.valueOf(txtNumeroConta.getText()), txtDigitoConta.getText()));
        contaBancaria.setAgencia(new Agencia(Integer.parseInt(txtAgencia.getText()), txtDigitoAgencia.getText()));
        contaBancaria.setCarteira(new Carteira(Integer.parseInt(txtCarteira.getText())));
        Titulo titulo = new Titulo(contaBancaria, crieSacado(), crieCedente(), crieSacadorAvalista());
        titulo.setNossoNumero("99345678");
        titulo.setNumeroDoDocumento("123456");
        titulo.setDigitoDoNossoNumero("5");
        titulo.setValor(BigDecimal.valueOf(Double.parseDouble(txtValorDocumento.getText().replace("R$", "").replace(".", "").replace(",", "."))));
        titulo.setDataDoDocumento(new Date());
        titulo.setDataDoVencimento(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
        titulo.setTipoDeDocumento(TipoDeTitulo.DM_DUPLICATA_MERCANTIL);
        titulo.setAceite(Titulo.Aceite.A);
        titulo.setDesconto(new BigDecimal(0.05));
        titulo.setDeducao(BigDecimal.ZERO);
        titulo.setMora(BigDecimal.ZERO);
        titulo.setValorCobrado(BigDecimal.ZERO);

        listar.add(titulo);
        Boleto boletoSicoob = new Boleto(titulo);

        boletoSicoob.setLocalPagamento("Pagavel preferencialmente na rede Sicoob ou em "
                + "qualquer banco até o vencimento.");
        boletoSicoob.setInstrucaoAoSacado("Senhor pagador, sabemos sim que o valor cobrado não é o esperado, "
                + "Aproveite o DESCONTÃO!");
        boletoSicoob.setInstrucao1(txtInstrucao1.getText());
        boletoSicoob.setInstrucao2(txtInstrucao2.getText());
        boletoSicoob.setInstrucao3(txtInstrucao3.getText());
        boletoSicoob.setInstrucao4(txtInstrucao4.getText());
        boletoSicoob.setInstrucao5(txtInstrucao5.getText());
        boletoSicoob.setInstrucao6(txtInstrucao6.getText());
        boletoSicoob.setInstrucao7(txtInstrucao7.getText());
        boletoSicoob.setInstrucao8(txtInstrucao8.getText());

        try {
            geraRemessa(listar);
        } catch (IOException ex) {
            System.out.println("" + ex.getMessage());
        }
        /*
            GERANDO O BOLETO BANCÁRIO
         */
        //Instanciando o BoletoViewer, classe responsável pela geração do boleto bancário.
        if (rbSimples.isSelected() == true) {
            BoletoViewer boletoViewer = new BoletoViewer(boletoSicoob);
            boletoViewer.setTemplate("/BoletoBancario/Boleto.pdf");

            File arquivo = boletoViewer.getPdfAsFile("/BoletoBancario/BoletoSimples.pdf");
            mostreBoletoNaTela(arquivo);
        } else if (rbCarne.isSelected() == true) {

        }
        return boletoSicoob;

    }

    public static byte[] mergeFilesInPages(List<byte[]> pdfFilesAsByteArray) throws DocumentException, IOException {
        Document document = new Document();
        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();

        PdfWriter writer = PdfWriter.getInstance(document, byteOS);
        document.open();

        PdfContentByte cb = writer.getDirectContent();
        float positionAnterior = 0;
        /* Para cada arquivo da lista, cria-se um PdfReader, responsável por ler o arquivo PDF
            e recuperar informações dele.
         */

        for (byte[] pdfFile : pdfFilesAsByteArray) {
            PdfReader reader = new PdfReader(pdfFile);

            //faz o processo de mesclagem por página do arquivo, começando pela de número 1.
            for (int i = 1; i <= reader.getNumberOfPages(); i++) {
                float documentHeight = cb.getPdfDocument().getPageSize().getHeight();

                //Importa a página do PDF de origem.
                PdfImportedPage page = writer.getImportedPage(reader, i);
                float pagePosition = positionAnterior;

                /**
                 * Se a altura restante no documento de destino for menor que a
                 * altura do documento, cria-se uma nova página no documento de
                 * destino.
                 */
                if ((documentHeight - positionAnterior) <= page.getHeight()) {
                    document.newPage();
                    pagePosition = 0;
                    positionAnterior = 0;

                }

                //Adiciona página ao PDF destino.
                cb.addTemplate(page, 0, pagePosition);
                positionAnterior += page.getHeight();
            }
        }
        byteOS.flush();
        document.close();

        byte[] arquivoEmBytes = byteOS.toByteArray();
        byteOS.close();
        return arquivoEmBytes;
    }

    private void Inserir() {
        try {

            GregorianCalendar cal = new GregorianCalendar();
            String primeiroVencimento = "", diaAtual = "";
            Long cheque = 0L;
            diaAtual = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            primeiroVencimento = txtDataVencimento.getText();
            Integer numPar = 0, adicionaDias = 0;
            // int dias = 0;

            numPar = Integer.parseInt(String.valueOf(txtParcela.getValue()));
            valorParcela = (Double.parseDouble(txtValorDocumento.getText().
                    replace("R$", "").replace(".", "").replace(",", "."))
                    / numPar);
            if (new SimpleDateFormat("yyyy-MM-dd").parse(primeiroVencimento).before(
                    new SimpleDateFormat("yyyy-MM-dd").parse(diaAtual))) {
                JOptionPane.showMessageDialog(null, "Data anterior a data atual!",
                        "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            } else {

                for (int e = 0; e < numPar; e++) {
                    cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(txtDataVencimento.getText()));
                    cal.add(GregorianCalendar.MONTH, e);

                    data = cal.getTime();

                }

            }

        } catch ( Exception e) {
            System.out.println("" + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao Inserir a Prazo!", "ERRO",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoletoVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoletoVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoletoVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoletoVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                BoletoVIEW dialog = new BoletoVIEW(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnGerar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton rbBancoBrasil;
    private javax.swing.JRadioButton rbBradesco;
    private javax.swing.JRadioButton rbCaixa;
    private javax.swing.JRadioButton rbCarne;
    private javax.swing.JRadioButton rbHSBC;
    private javax.swing.JRadioButton rbItau;
    private javax.swing.JRadioButton rbSantander;
    private javax.swing.JRadioButton rbSicoob;
    private javax.swing.JRadioButton rbSimples;
    private javax.swing.ButtonGroup tipoBanco;
    private javax.swing.ButtonGroup tipoBoleto;
    private javax.swing.JTextField txtAgencia;
    private javax.swing.JTextField txtCNPJ;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtCarteira;
    private javax.swing.JTextField txtCedente;
    private javax.swing.JFormattedTextField txtDataVencimento;
    private javax.swing.JTextField txtDigitoAgencia;
    private javax.swing.JTextField txtDigitoConta;
    private javax.swing.JTextField txtInstrucao1;
    private javax.swing.JTextField txtInstrucao2;
    private javax.swing.JTextField txtInstrucao3;
    private javax.swing.JTextField txtInstrucao4;
    private javax.swing.JTextField txtInstrucao5;
    private javax.swing.JTextField txtInstrucao6;
    private javax.swing.JTextField txtInstrucao7;
    private javax.swing.JTextField txtInstrucao8;
    private javax.swing.JTextField txtNumeroConta;
    private javax.swing.JSpinner txtParcela;
    private javax.swing.JTextField txtSacado;
    private javax.swing.JTextField txtValorDocumento;
    // End of variables declaration                   
ArrayList<String> lista = new ArrayList<String>();
}